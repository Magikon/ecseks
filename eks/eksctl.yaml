apiVersion: eksctl.io/v1alpha5
availabilityZones:
- us-east-1a
- us-east-1b
- us-east-1c
iam:
  vpcResourceControllerPolicy: true
  withOIDC: true
kind: ClusterConfig
metadata:
  name: zerosystems-cluster
  region: us-east-1
  version: "1.21"
privateCluster:
  enabled: false
vpc:
  autoAllocateIPv6: false
  cidr: 10.8.0.0/16
  clusterEndpoints:
    privateAccess: false
    publicAccess: true
  manageSharedNodeSecurityGroupRules: true
  nat:
    gateway: Single
cloudWatch:
    clusterLogging:
        enableTypes: ["audit", "authenticator", "api", "controllerManager", "scheduler"]
managedNodeGroups:
  - name: nodegroup1a
    amiFamily: AmazonLinux2
    instanceType: t3.medium
    minSize: 1
    maxSize: 2
    desiredCapacity: 1
    volumeSize: 80
    volumeType: gp2
    privateNetworking: true
    availabilityZones: ["us-east-1a"]
    labels:
      enviroment: development
      alpha.eksctl.io/cluster-name: zerosystems-cluster
      alpha.eksctl.io/nodegroup-name: nodegroup1a
    tags:
      k8s.io/cluster-autoscaler/node-template/label/enviroment: development
      alpha.eksctl.io/nodegroup-name: nodegroup1a
      alpha.eksctl.io/nodegroup-type: managed
    iam:
      withAddonPolicies:
        albIngress: true #The imageBuilder policy allows for full ECR (Elastic Container Registry) access. This is useful for building, for example, a CI server that needs to push images to ECR.
        autoScaler: true
        cloudWatch: true
        ebs: true        #The Amazon Elastic Block Store (Amazon EBS) Container Storage Interface (CSI) driver allows Amazon Elastic Kubernetes Service (Amazon EKS) clusters to manage the lifecycle of Amazon EBS volumes for persistent volumes.  - name: nodegroup2b
  - name: nodegroup1b
    amiFamily: AmazonLinux2
    instanceType: t3.medium
    minSize: 1
    maxSize: 2
    desiredCapacity: 1
    volumeSize: 80
    volumeType: gp2
    privateNetworking: true
    availabilityZones: ["us-east-1b"]
    labels:
      enviroment: development
      alpha.eksctl.io/cluster-name: zerosystems-cluster
      alpha.eksctl.io/nodegroup-name: nodegroup1b
    tags:
      k8s.io/cluster-autoscaler/node-template/label/enviroment: development
      alpha.eksctl.io/nodegroup-name: nodegroup1b
      alpha.eksctl.io/nodegroup-type: managed
    iam:
      withAddonPolicies:
        albIngress: true #The imageBuilder policy allows for full ECR (Elastic Container Registry) access. This is useful for building, for example, a CI server that needs to push images to ECR.
        autoScaler: true
        cloudWatch: true
        ebs: true        #The Amazon Elastic Block Store (Amazon EBS) Container Storage Interface (CSI) driver allows Amazon Elastic Kubernetes Service (Amazon EKS) clusters to manage the lifecycle of Amazon EBS volumes for persistent volumes.  - name: nodegroup2c
  - name: nodegroup1c
    amiFamily: AmazonLinux2
    instanceType: t3.medium
    minSize: 1
    maxSize: 2
    desiredCapacity: 1
    volumeSize: 80
    volumeType: gp2
    privateNetworking: true
    availabilityZones: ["us-east-1c"]
    labels:
      enviroment: development
      alpha.eksctl.io/cluster-name: zerosystems-cluster
      alpha.eksctl.io/nodegroup-name: nodegroup1c
    tags:
      k8s.io/cluster-autoscaler/node-template/label/enviroment: development
      alpha.eksctl.io/nodegroup-name: nodegroup1c
      alpha.eksctl.io/nodegroup-type: managed
    iam:
      withAddonPolicies:
        albIngress: true #The imageBuilder policy allows for full ECR (Elastic Container Registry) access. This is useful for building, for example, a CI server that needs to push images to ECR.
        autoScaler: true
        cloudWatch: true
        ebs: true        #The Amazon Elastic Block Store (Amazon EBS) Container Storage Interface (CSI) driver allows Amazon Elastic Kubernetes Service (Amazon EKS) clusters to manage the lifecycle of Amazon EBS volumes for persistent volumes.