apiVersion: eksctl.io/v1alpha5
availabilityZones:
- us-east-2a
- us-east-2b
- us-east-2c
iam:
  vpcResourceControllerPolicy: true
  withOIDC: true
kind: ClusterConfig
metadata:
  name: zerosystems-cluster
  region: us-east-2
  version: "1.21"
privateCluster:
  enabled: false
vpc:
  autoAllocateIPv6: false
  cidr: 10.8.0.0/16
  clusterEndpoints:
    privateAccess: false
    publicAccess: true
  manageSharedNodeSecurityGroupRules: true
  nat:
    gateway: Single
cloudWatch:
    clusterLogging:
        enableTypes: ["audit", "authenticator", "api", "controllerManager", "scheduler"]
managedNodeGroups:
  - name: nodegroup2a
    amiFamily: AmazonLinux2
    instanceType: t3.medium
    minSize: 1
    maxSize: 2
    desiredCapacity: 1
    ssh: 
      publicKeyName: ec2key
    volumeSize: 80
    volumeType: gp2
    privateNetworking: true
    availabilityZones: ["us-east-2a"]
    labels:
      enviroment: development
      alpha.eksctl.io/cluster-name: zerosystems-cluster
      alpha.eksctl.io/nodegroup-name: nodegroup2a
    tags:
      k8s.io/cluster-autoscaler/node-template/label/enviroment: development
      alpha.eksctl.io/nodegroup-name: nodegroup2a
      alpha.eksctl.io/nodegroup-type: managed
    iam:
      withAddonPolicies:
        albIngress: true #The imageBuilder policy allows for full ECR (Elastic Container Registry) access. This is useful for building, for example, a CI server that needs to push images to ECR.
        autoScaler: true
        cloudWatch: true
        ebs: true        #The Amazon Elastic Block Store (Amazon EBS) Container Storage Interface (CSI) driver allows Amazon Elastic Kubernetes Service (Amazon EKS) clusters to manage the lifecycle of Amazon EBS volumes for persistent volumes.  - name: nodegroup2b
    amiFamily: AmazonLinux2
    instanceType: t3.medium
    minSize: 1
    maxSize: 2
    desiredCapacity: 1
    ssh: 
      publicKeyName: ec2key
    volumeSize: 80
    volumeType: gp2
    privateNetworking: true
    availabilityZones: ["us-east-2b"]
    labels:
      enviroment: development
      alpha.eksctl.io/cluster-name: zerosystems-cluster
      alpha.eksctl.io/nodegroup-name: nodegroup2b
    tags:
      k8s.io/cluster-autoscaler/node-template/label/enviroment: development
      alpha.eksctl.io/nodegroup-name: nodegroup2b
      alpha.eksctl.io/nodegroup-type: managed
    iam:
      withAddonPolicies:
        albIngress: true #The imageBuilder policy allows for full ECR (Elastic Container Registry) access. This is useful for building, for example, a CI server that needs to push images to ECR.
        autoScaler: true
        cloudWatch: true
        ebs: true        #The Amazon Elastic Block Store (Amazon EBS) Container Storage Interface (CSI) driver allows Amazon Elastic Kubernetes Service (Amazon EKS) clusters to manage the lifecycle of Amazon EBS volumes for persistent volumes.  - name: nodegroup2c
    amiFamily: AmazonLinux2
    instanceType: t3.medium
    minSize: 1
    maxSize: 2
    desiredCapacity: 1
    ssh: 
      publicKeyName: ec2key
    volumeSize: 80
    volumeType: gp2
    privateNetworking: true
    availabilityZones: ["us-east-2c"]
    labels:
      enviroment: development
      alpha.eksctl.io/cluster-name: zerosystems-cluster
      alpha.eksctl.io/nodegroup-name: nodegroup2c
    tags:
      k8s.io/cluster-autoscaler/node-template/label/enviroment: development
      alpha.eksctl.io/nodegroup-name: nodegroup2c
      alpha.eksctl.io/nodegroup-type: managed
    iam:
      withAddonPolicies:
        albIngress: true #The imageBuilder policy allows for full ECR (Elastic Container Registry) access. This is useful for building, for example, a CI server that needs to push images to ECR.
        autoScaler: true
        cloudWatch: true
        ebs: true        #The Amazon Elastic Block Store (Amazon EBS) Container Storage Interface (CSI) driver allows Amazon Elastic Kubernetes Service (Amazon EKS) clusters to manage the lifecycle of Amazon EBS volumes for persistent volumes.