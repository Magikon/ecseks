AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Dedicated VPC
Metadata:
  'AWS::CloudFormation::Interface':
    VPCCIDR:
    - Label:
        Default: 'VPC IPv4 CIDR'
      Parameters:
      - IPv4CIDR
    - Label:
        Default: 'Mask Bloks'
      Parameters:
      - MaskBloks
Parameters:
   IPv4CIDR:
     Description: 'VPC IPv4 CIDR'
     Type: String
     Default: '10.8.0.0/16'
   MaskBloks:
     Description: 'Subnets IPv4 Mask Bloks. Ex. If select 8, then Mask Bits (32-8=24) => 10.8.0.0/24 Cidr Netmask 255.255.255.0'
     Type: String
     AllowedValues:
     - '8'
     - '9'
     - '10'
     - '11'
     - '12'
     - '13'
     Default: '13'
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref IPv4CIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/VPC'
  SubnetPublic1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt VPC.CidrBlock, 6, !Ref MaskBloks ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPublic1'
      VpcId: !Ref VPC
  SubnetPublic2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt VPC.CidrBlock, 6, !Ref MaskBloks ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPublic2'
      VpcId: !Ref VPC
  SubnetPublic3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt VPC.CidrBlock, 6, !Ref MaskBloks ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPublic3'
      VpcId: !Ref VPC
  SubnetPrivate1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt VPC.CidrBlock, 6, !Ref MaskBloks ]]
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPrivate1'
      VpcId: !Ref VPC
  SubnetPrivate2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Select [ 4, !Cidr [ !GetAtt VPC.CidrBlock, 6, !Ref MaskBloks ]]
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPrivate2'
      VpcId: !Ref VPC
  SubnetPrivate3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Select [ 5, !Cidr [ !GetAtt VPC.CidrBlock, 6, !Ref MaskBloks ]]
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPrivate3'
      VpcId: !Ref VPC
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/InternetGateway'
  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 
        - NATIP
        - AllocationId
      SubnetId: !Ref SubnetPublic1
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/NATGateway'
  NATIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/NATIP'
  NATPrivateSubnetRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTable1
  NATPrivateSubnetRoute2:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTable2
  NATPrivateSubnetRoute3:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTable3
  PublicSubnetRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
    DependsOn:
      - VPCGatewayAttachment
  PrivateRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PrivateRouteTable1'
      VpcId: !Ref VPC
  PrivateRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PrivateRouteTable2'
      VpcId: !Ref VPC
  PrivateRouteTable3:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PrivateRouteTable3'
      VpcId: !Ref VPC
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PublicRouteTable'
      VpcId: !Ref VPC 
  RouteTableAssociationPrivate1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref SubnetPrivate1
  RouteTableAssociationPrivate2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref SubnetPrivate2
  RouteTableAssociationPrivate3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref SubnetPrivate3
  RouteTableAssociationPublic1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublic1
  RouteTableAssociationPublic2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublic2
  RouteTableAssociationPublic3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublic3
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
Outputs:
  VPCStackName:
    Value: !Ref 'AWS::StackName'
  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}::VPC'  
  CIDR:
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: !Sub '${AWS::StackName}::CIDR'
  SubnetsPrivate:
    Value: !Join 
      - ','
      - - !Ref SubnetPrivate1
        - !Ref SubnetPrivate2
        - !Ref SubnetPrivate3
    Export:
      Name: !Sub '${AWS::StackName}::SubnetsPrivate'
  SubnetsPublic:
    Value: !Join 
      - ','
      - - !Ref SubnetPublic1
        - !Ref SubnetPublic2
        - !Ref SubnetPublic3
    Export:
      Name: !Sub '${AWS::StackName}::SubnetsPublic'
