AWSTemplateFormatVersion: 2010-09-09
# Transform: AWS::Serverless-2016-10-31
Description: >-
  EKS cluster
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'VPC Parameters'
      Parameters:
      - VPC
      - SubnetsPrivate
      - SubnetsPublic
    - Label:
        default: 'EC2 Parameters'
      Parameters:
      - SSHKeyName
      - InstanceType
Mappings:
  RegionMap:
    eu-north-1:
      ami: ami-0917076ab9780844d
    ap-south-1:
      ami: ami-08df646e18b182346
    eu-west-3:
      ami: ami-0f5094faf16f004eb
    eu-west-2:
      ami: ami-078a289ddf4b09ae0
    eu-west-1:
      ami: ami-0d71ea30463e0ff8d
    ap-northeast-3:
      ami: ami-0c66c8e259df7ec04
    ap-northeast-2:
      ami: ami-0fd0765afb77bcca7
    ap-northeast-1:
      ami: ami-0b7546e839d7ace12
    sa-east-1:
      ami: ami-037c192f0fa52a358
    ca-central-1:
      ami: ami-00f881f027a6d74a0
    ap-southeast-1:
      ami: ami-0c802847a7dd848c0
    ap-southeast-2:
      ami: ami-07620139298af599e
    eu-central-1:
      ami: ami-0a1ee2fb28fe05df3
    us-east-1:
      ami: ami-0cff7528ff583bf9a
    us-east-2:
      ami: ami-02d1e544b84bf7502
    us-west-1:
      ami: ami-0d9858aa3c6322f73
    us-west-2:
      ami: ami-098e42ae54c764c35
Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
  SSHKeyName:
    Description: 'Optional key pair of the ec2-user to establish a SSH connection to the EC2 instances of the EKS cluster.'
    Type: String
    Default: 'ec2-key'
  InstanceType:
    Description: 'The instance type of the EC2 instances of the ECS cluster.'
    Type: String
    Default: 't2.medium'
  SubnetsPrivate:
    Type: List<AWS::EC2::Subnet::Id>
  SubnetsPublic:
    Type: List<AWS::EC2::Subnet::Id>
Resources:
  SSH:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow SSH access
      GroupName: !Sub '${AWS::StackName}-remoteAccess'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: >-
            Allow SSH access 
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/SSH'
      VpcId: !Ref VPC
  Instance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          default: [install, configure, run]
        install:
          packages:
            yum:
              awslogs: []
          sources:
            /usr/local/bin: "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz"
          files:
            '/etc/awslogs/awscli.conf':
              content: !Sub |
                [default]
                region = ${AWS::Region}
                [plugins]
                cwlogs = cwlogs
              mode: '000644'
              owner: root
              group: root
        run:
          # sources:
            # /tmp: "https://get.helm.sh/helm-v3.9.0-linux-amd64.tar.gz"
          commands:
            01_install_kubectl:
              command: !Join
                - ''
                - - curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.21.2/2021-07-05/bin/linux/amd64/kubectl; 
                  - chmod +x kubectl; 
                  - mv kubectl /usr/local/bin/
            02_move_helm:
              command: !Join
                - ''
                - - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3;
                  - chmod 700 get_helm.sh;
                  - ./get_helm.sh;
          files:
            '/root/service.yaml':
              content: !Sub |
                apiVersion: networking.k8s.io/v1
                kind: Ingress
                metadata:
                  name: zeroconnectapi
                  annotations:
                    alb.ingress.kubernetes.io/scheme: internet-facing
                    alb.ingress.kubernetes.io/target-type: ip
                    alb.ingress.kubernetes.io/healthcheck-path: '/v1/docs'
                    alb.ingress.kubernetes.io/success-codes: '301'
                spec:
                  defaultBackend:
                    service:
                      name: zeroconnectapi
                      port:
                        number: 80
                  ingressClassName: alb
                  rules:
                    - http:
                        paths:
                        - path: /
                          pathType: Prefix
                          backend:
                            service:
                              name: zeroconnectapi
                              port:
                                number: 80
              mode: '000644'
              owner: root
              group: root
            '/root/eksconfig.yaml':
              content: !Sub |
                apiVersion: eksctl.io/v1alpha5
                availabilityZones:
                - ${AWS::Region}a
                - ${AWS::Region}b
                - ${AWS::Region}c
                iam:
                  vpcResourceControllerPolicy: true
                  withOIDC: true
                kind: ClusterConfig
                metadata:
                  name: zerosystems-cluster
                  region: ${AWS::Region}
                  version: "1.21"
                privateCluster:
                  enabled: false
                vpc:
                  autoAllocateIPv6: false
                  cidr: 10.8.0.0/16
                  clusterEndpoints:
                    privateAccess: false
                    publicAccess: true
                  manageSharedNodeSecurityGroupRules: true
                  nat:
                    gateway: Single
                cloudWatch:
                    clusterLogging:
                        enableTypes: ["audit", "authenticator", "api", "controllerManager", "scheduler"]
                managedNodeGroups:
                  - name: nodegroup1a
                    amiFamily: AmazonLinux2
                    instanceType: t3.medium
                    minSize: 1
                    maxSize: 2
                    desiredCapacity: 1
                    ssh: 
                      publicKeyName: ec2-key
                    volumeSize: 80
                    volumeType: gp2
                    privateNetworking: true
                    availabilityZones: ["${AWS::Region}a"]
                    labels:
                      enviroment: development
                      alpha.eksctl.io/cluster-name: zerosystems-cluster
                      alpha.eksctl.io/nodegroup-name: nodegroup1a
                    tags:
                      k8s.io/cluster-autoscaler/node-template/label/enviroment: development
                      alpha.eksctl.io/nodegroup-name: nodegroup1a
                      alpha.eksctl.io/nodegroup-type: managed
                    iam:
                      withAddonPolicies:
                        albIngress: true #The imageBuilder policy allows for full ECR (Elastic Container Registry) access. This is useful for building, for example, a CI server that needs to push images to ECR.
                        autoScaler: true
                        cloudWatch: true
                        ebs: true        #The Amazon Elastic Block Store (Amazon EBS) Container Storage Interface (CSI) driver allows Amazon Elastic Kubernetes Service (Amazon EKS) clusters to manage the lifecycle of Amazon EBS volumes for persistent volumes.  - name: nodegroup2b
                  - name: nodegroup1b
                    amiFamily: AmazonLinux2
                    instanceType: t3.medium
                    minSize: 1
                    maxSize: 2
                    desiredCapacity: 1
                    ssh: 
                      publicKeyName: ec2-key
                    volumeSize: 80
                    volumeType: gp2
                    privateNetworking: true
                    availabilityZones: ["${AWS::Region}b"]
                    labels:
                      enviroment: development
                      alpha.eksctl.io/cluster-name: zerosystems-cluster
                      alpha.eksctl.io/nodegroup-name: nodegroup1b
                    tags:
                      k8s.io/cluster-autoscaler/node-template/label/enviroment: development
                      alpha.eksctl.io/nodegroup-name: nodegroup1b
                      alpha.eksctl.io/nodegroup-type: managed
                    iam:
                      withAddonPolicies:
                        albIngress: true #The imageBuilder policy allows for full ECR (Elastic Container Registry) access. This is useful for building, for example, a CI server that needs to push images to ECR.
                        autoScaler: true
                        cloudWatch: true
                        ebs: true        #The Amazon Elastic Block Store (Amazon EBS) Container Storage Interface (CSI) driver allows Amazon Elastic Kubernetes Service (Amazon EKS) clusters to manage the lifecycle of Amazon EBS volumes for persistent volumes.  - name: nodegroup2c
                  - name: nodegroup1c
                    amiFamily: AmazonLinux2
                    instanceType: t3.medium
                    minSize: 1
                    maxSize: 2
                    desiredCapacity: 1
                    ssh: 
                      publicKeyName: ec2-key
                    volumeSize: 80
                    volumeType: gp2
                    privateNetworking: true
                    availabilityZones: ["${AWS::Region}c"]
                    labels:
                      enviroment: development
                      alpha.eksctl.io/cluster-name: zerosystems-cluster
                      alpha.eksctl.io/nodegroup-name: nodegroup1c
                    tags:
                      k8s.io/cluster-autoscaler/node-template/label/enviroment: development
                      alpha.eksctl.io/nodegroup-name: nodegroup1c
                      alpha.eksctl.io/nodegroup-type: managed
                    iam:
                      withAddonPolicies:
                        albIngress: true #The imageBuilder policy allows for full ECR (Elastic Container Registry) access. This is useful for building, for example, a CI server that needs to push images to ECR.
                        autoScaler: true
                        cloudWatch: true
                        ebs: true        #The Amazon Elastic Block Store (Amazon EBS) Container Storage Interface (CSI) driver allows Amazon Elastic Kubernetes Service (Amazon EKS) clusters to manage the lifecycle of Amazon EBS volumes for persistent volumes.
              mode: '000644'
              owner: root
              group: root
        configure:
          packages:
            yum:
              amazon-ssm-agent: []
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=Instance
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - '/etc/cfn/cfn-hup.conf'
                - '/etc/cfn/hooks.d/cfn-auto-reloader.conf'
              amazon-ssm-agent:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                  - amazon-ssm-agent
    Properties:
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - ami
      IamInstanceProfile: !Ref InstanceProfile
      SubnetId: !Select [ 0, !Ref SubnetsPublic ]
      InstanceType: !Ref InstanceType
      KeyName: !Ref SSHKeyName
      SecurityGroupIds: 
        - !GetAtt 'SSH.GroupId'
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -ex
          trap '/opt/aws/bin/cfn-signal -e 1 --stack ${AWS::StackName} --resource Instance --region ${AWS::Region}' ERR
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Instance --region ${AWS::Region}
          # eksctl create cluster -f /root/eksconfig.yaml
          # eksctl get iamidentitymapping --cluster zero --region=us-east-1
          /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource Instance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
      - !Ref Role
  Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'ec2.amazonaws.com'
          Action: 'sts:AssumeRole'
      ManagedPolicyArns: !Ref 'AWS::NoValue'
      PermissionsBoundary:  !Ref 'AWS::NoValue'
      Policies:
      - PolicyName: ssm
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ssmmessages:*' # SSM Agent by https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-messageAPIs.html
            - 'ssm:UpdateInstanceInformation' # SSM agent by https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-messageAPIs.html
            - 'ec2messages:*' # SSM Session Manager by https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-messageAPIs.html
            Resource: '*'
      - PolicyName: eks
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'eks:*'
            Resource: '*'
      - PolicyName: ec2
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ec2:*'
            Resource: '*'
      - PolicyName: elasticloadbalancing
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'elasticloadbalancing:*'
            Resource: '*'
      - PolicyName: cloudwatch
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'cloudwatch:*'
            Resource: '*'
      - PolicyName: autoscaling
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'autoscaling:*'
            Resource: '*'
      - PolicyName: iam
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'iam:CreateInstanceProfile'
            - 'iam:DeleteInstanceProfile'
            - 'iam:GetInstanceProfile'
            - 'iam:RemoveRoleFromInstanceProfile'
            - 'iam:GetRole'
            - 'iam:CreateRole'
            - 'iam:DeleteRole'
            - 'iam:AttachRolePolicy'
            - 'iam:PutRolePolicy'
            - 'iam:ListInstanceProfiles'
            - 'iam:AddRoleToInstanceProfile'
            - 'iam:ListInstanceProfilesForRole'
            - 'iam:PassRole'
            - 'iam:DetachRolePolicy'
            - 'iam:DeleteRolePolicy'
            - 'iam:GetRolePolicy'
            - 'iam:GetOpenIDConnectProvider'
            - 'iam:CreateOpenIDConnectProvider'
            - 'iam:DeleteOpenIDConnectProvider'
            - 'iam:TagOpenIDConnectProvider'
            - 'iam:ListAttachedRolePolicies'
            - 'iam:TagRole'
            - 'iam:GetPolicy'
            - 'iam:CreatePolicy'
            - 'iam:DeletePolicy'
            - 'iam:ListPolicyVersions'
            Resource: 
            - !Sub 'arn:aws:iam::${AWS::AccountId}:instance-profile/eksctl-*'
            - !Sub 'arn:aws:iam::${AWS::AccountId}:role/eksctl-*'
            - !Sub 'arn:aws:iam::${AWS::AccountId}:policy/eksctl-*'
            - !Sub 'arn:aws:iam::${AWS::AccountId}:oidc-provider/*'
            - !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/eks-nodegroup.amazonaws.com/AWSServiceRoleForAmazonEKSNodegroup'
            - !Sub 'arn:aws:iam::${AWS::AccountId}:role/eksctl-managed-*'
          - Effect: Allow
            Action:
            - 'iam:GetRole'
            Resource:
            - !Sub 'arn:aws:iam::${AWS::AccountId}:role/*'
          - Effect: Allow
            Action:
            - 'iam:CreateServiceLinkedRole'
            Resource: '*'
            Condition:
              StringEquals:
                'iam:AWSServiceName':
                - 'eks.amazonaws.com'
                - 'eks-nodegroup.amazonaws.com'
                - 'eks-fargate.amazonaws.com'
      - PolicyName: cloudformation
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'cloudformation:*'
            Resource: '*'
