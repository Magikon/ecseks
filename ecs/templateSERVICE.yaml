---
AWSTemplateFormatVersion: '2010-09-09'
Description: "ECS: service template"
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentClusterStack
      - ParentZoneStack
    - Label:
        default: 'Load Balancer Parameters'
      Parameters:
      - LoadBalancerPriority
      - LoadBalancerHostPattern
      - LoadBalancerPath
      - LoadBalancerHttps
      - LoadBalancerDeregistrationDelay
    - Label:
        default: 'Task Parameters'
      Parameters:
      - Image
    - Label:
        default: 'Service Parameters'
      Parameters:
      - SubDomainNameWithDot
      - AutoScaling
      - DesiredCount
      - MaxCapacity
      - MinCapacity
      - HealthCheckGracePeriod
Parameters:
  ParentClusterStack:
    Description: 'Stack name of parent Cluster stack based on ecs/cluster.yaml template.'
    Type: String
  ParentZoneStack:
    Description: 'Optional stack name of parent zone stack based on vpc/zone-*.yaml template.'
    Type: String
    Default: ''
  LoadBalancerPriority:
    Description: 'The priority for the rule. Elastic Load Balancing evaluates rules in priority order, from the lowest value to the highest value. If a request satisfies a rule, Elastic Load Balancing ignores all subsequent rules. A target group can have only one rule with a given priority.'
    Type: Number
    Default: 1
    ConstraintDescription: 'Must be in the range [1-99999]'
    MinValue: 1
    MaxValue: 99999
  LoadBalancerHostPattern:
    Description: 'Optional host pattern. Specify LoadBalancerPath and/or LoadBalancerHostPattern.'
    Type: String
    Default: ''
    ConstraintDescription: 'Must not be longer than 255'
    MaxLength: 255
  LoadBalancerPath:
    Description: 'Optional path part of the path pattern. E.g., for service, the path pattern will be /service/*.  Specify LoadBalancerPath and/or LoadBalancerHostPattern.'
    Type: String
    Default: '/*'
    ConstraintDescription: 'Must not be longer than 255'
    MaxLength: 255
  LoadBalancerHttps:
    Description: 'If the cluster supports HTTPS (LoadBalancerCertificateArn is set) you can enable HTTPS for the service'
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  LoadBalancerDeregistrationDelay:
    Description: 'The amount time (in seconds) to wait before changing the state of a deregistering target from draining to unused.'
    Type: Number
    Default: 60
    ConstraintDescription: 'Must be in the range [0-3600]'
    MinValue: 0
    MaxValue: 3600
  Image:
    Description: 'The image to use for a container, which is passed directly to the Docker daemon. You can use images in the Docker Hub registry or specify other repositories (repository-url/image:tag).'
    Type: String
    Default: 139013895924.dkr.ecr.us-east-1.amazonaws.com/zeroconnect-sql:latest
  DesiredCount:
    Description: 'The number of simultaneous tasks, that you want to run on the cluster.'
    Type: Number
    Default: 1
    ConstraintDescription: 'Must be >= 1'
    MinValue: 1
  MaxCapacity:
    Description: 'The maximum number of simultaneous tasks, that you want to run on the cluster.'
    Type: Number
    Default: 4
    ConstraintDescription: 'Must be >= 1'
    MinValue: 1
  MinCapacity:
    Description: 'The minimum number of simultaneous tasks, that you want to run on the cluster.'
    Type: Number
    Default: 1
    ConstraintDescription: 'Must be >= 1'
    MinValue: 1
  SubDomainNameWithDot:
    Description: 'Name that is used to create the DNS entry with trailing dot, e.g. ?{SubDomainNameWithDot}?{HostedZoneName}. Leave blank for naked (or apex and bare) domain. Requires ParentZoneStack parameter!'
    Type: String
    Default: ''
  AutoScaling:
    Description: 'Scale number of tasks based on CPU load?'
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
  HealthCheckGracePeriod:
    Description: 'The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks after a task has first started.'
    Type: Number
    Default: 60
    MinValue: 0
    MaxValue: 1800
Conditions:
  HasLoadBalancerHttps: !Equals [!Ref LoadBalancerHttps, 'true']
  HasLoadBalancerPath: !Not [!Equals [!Ref LoadBalancerPath, '']]
  HasLoadBalancerHostPattern: !Not [!Equals [!Ref LoadBalancerHostPattern, '']]
  HasZone: !Not [!Equals [!Ref ParentZoneStack, '']]
  HasAutoScaling: !Equals [!Ref AutoScaling, 'true']
Resources:
  TaskExectionRole: 
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'ecs-tasks.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: ecsTaskSecret
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ssm:GetParameters'
            - 'secretsmanager:GetSecretValue'
            - 'kms:Decrypt'
            Resource: 
            - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
            - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'
            - !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*'
      - PolicyName: ecsTaskECR
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ecr:GetDownloadUrlForLayer'
            - 'ecr:BatchGetImage'
            - 'ecr:BatchCheckLayerAvailability'
            - 'ecr:GetAuthorizationToken'
            Resource: '*'
      - PolicyName: logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            - 'logs:DescribeLogStreams'
            Resource: '*'
  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Ref 'AWS::StackName'
      ExecutionRoleArn: !GetAtt 'TaskExectionRole.Arn'
      NetworkMode: bridge
      ContainerDefinitions:
      - Name: zerosystemsapi # if you change this, you also must change the AWS::ECS::Service
        Image: !Ref Image
        Memory: 128
        PortMappings:
        - ContainerPort: 80 # if you change this, you also must change the AWS::ECS::Service
          Protocol: tcp
        Secrets: 
        - Name: 'ZC_DB__DATABASENAME'
          ValueFrom: 'arn:aws:secretsmanager:us-east-1:139013895924:secret:ZeroSecretCF-OzkEVp:ZC_DB__DATABASENAME::'
        - Name: 'ZC_DB__PASSWORD'
          ValueFrom: 'arn:aws:secretsmanager:us-east-1:139013895924:secret:ZeroSecretCF-OzkEVp:ZC_DB__PASSWORD::'
        - Name: 'ZC_DB__SERVERURL'
          ValueFrom: 'arn:aws:secretsmanager:us-east-1:139013895924:secret:ZeroSecretCF-OzkEVp:ZC_DB__SERVERURL::'
        - Name: 'ZC_DB__USERNAME'
          ValueFrom: 'arn:aws:secretsmanager:us-east-1:139013895924:secret:ZeroSecretCF-OzkEVp:ZC_DB__USERNAME::'
        - Name: 'ZC_DB__AUTHENTICATIONTYPE'
          ValueFrom: 'arn:aws:secretsmanager:us-east-1:139013895924:secret:ZeroSecretCF-OzkEVp:ZC_DB__AUTHENTICATIONTYPE::'
        - Name: 'ASPNETCORE_ENVIRONMENT'
          ValueFrom: 'arn:aws:secretsmanager:us-east-1:139013895924:secret:ZeroSecretCF-OzkEVp:ASPNETCORE_ENVIRONMENT::'
        - Name: 'PAT'
          ValueFrom: 'arn:aws:secretsmanager:us-east-1:139013895924:secret:ZeroSecretCF-OzkEVp:PAT::'
        - Name: 'USER_VARIABLE'
          ValueFrom: 'arn:aws:secretsmanager:us-east-1:139013895924:secret:ZeroSecretCF-OzkEVp:USER_VARIABLE::'
        Essential: true
        LogConfiguration:
          LogDriver: awslogs
          Options:
            'awslogs-region': !Ref 'AWS::Region'
            'awslogs-group': {'Fn::ImportValue': !Sub '${ParentClusterStack}-LogGroup'}
            'awslogs-stream-prefix': !Ref 'AWS::StackName'
  RecordSet:
    Condition: HasZone
    Type: 'AWS::Route53::RecordSet'
    Properties:
      AliasTarget:
        HostedZoneId: {'Fn::ImportValue': !Sub '${ParentClusterStack}-CanonicalHostedZoneID'}
        DNSName: {'Fn::ImportValue': !Sub '${ParentClusterStack}-DNSName'}
      HostedZoneId: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneId'}
      Name: !Sub
      - '${SubDomainNameWithDot}${HostedZoneName}'
      - SubDomainNameWithDot: !Ref SubDomainNameWithDot
        HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
      Type: A
  RecordSetIPv6: # We can not conditionally create this only if the cluster's ALB has IPv6 turned on. Route53 does not let us query a broken AAAA record either. It just shows up as a Route53 record.
    Condition: HasZone
    Type: 'AWS::Route53::RecordSet'
    Properties:
      AliasTarget:
        HostedZoneId: {'Fn::ImportValue': !Sub '${ParentClusterStack}-CanonicalHostedZoneID'}
        DNSName: {'Fn::ImportValue': !Sub '${ParentClusterStack}-DNSName'}
      HostedZoneId: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneId'}
      Name: !Sub
      - '${SubDomainNameWithDot}${HostedZoneName}'
      - SubDomainNameWithDot: !Ref SubDomainNameWithDot
        HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
      Type: AAAA
  LoadBalancerTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: '/v1/docs'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-301'
      Port: 80
      Protocol: HTTP
      VpcId: {'Fn::ImportValue': !Sub '${ParentClusterStack}-VPC'}
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: !Ref LoadBalancerDeregistrationDelay
  LoadBalancerHttpListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref LoadBalancerTargetGroup
      Conditions: !If
      - HasLoadBalancerPath
      - !If
        - HasLoadBalancerHostPattern
        - - Field: host-header
            Values:
            - !Ref LoadBalancerHostPattern
          - Field: path-pattern
            Values:
            - !Sub '${LoadBalancerPath}'
        - - Field: path-pattern
            Values:
            - !Sub '${LoadBalancerPath}'
      - !If
        - HasLoadBalancerHostPattern
        - - Field: host-header
            Values:
            - !Ref LoadBalancerHostPattern
        - [] # neither LoadBalancerHostPattern nor LoadBalancerPath specified
      ListenerArn: {'Fn::ImportValue': !Sub '${ParentClusterStack}-HttpListener'}
      Priority: !Ref LoadBalancerPriority
  LoadBalancerHttpsListenerRule:
    Condition: HasLoadBalancerHttps
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref LoadBalancerTargetGroup
      Conditions: !If
      - HasLoadBalancerPath
      - !If
        - HasLoadBalancerHostPattern
        - - Field: host-header
            Values:
            - !Ref LoadBalancerHostPattern
          - Field: path-pattern
            Values:
            - !Sub '/${LoadBalancerPath}/*'
        - - Field: path-pattern
            Values:
            - !Sub '/${LoadBalancerPath}/*'
      - !If
        - HasLoadBalancerHostPattern
        - - Field: host-header
            Values:
            - !Ref LoadBalancerHostPattern
        - [] # neither LoadBalancerHostPattern nor LoadBalancerPath specified
      ListenerArn: {'Fn::ImportValue': !Sub '${ParentClusterStack}-HttpsListener'}
      Priority: !Ref LoadBalancerPriority
  ServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole'
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'ecs.amazonaws.com'
          Action: 'sts:AssumeRole'
      PermissionsBoundary: !Ref 'AWS::NoValue'
  Service:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: {'Fn::ImportValue': !Sub '${ParentClusterStack}-Cluster'}
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DesiredCount: !Ref DesiredCount
      HealthCheckGracePeriodSeconds: !Ref HealthCheckGracePeriod
      LoadBalancers:
      - ContainerName: zerosystemsapi
        ContainerPort: 80
        TargetGroupArn: !Ref LoadBalancerTargetGroup
      PlacementStrategies:
      - Type: spread
        Field: 'attribute:ecs.availability-zone'
      - Type: spread
        Field: instanceId
      Role: !GetAtt 'ServiceRole.Arn'
      TaskDefinition: !Ref TaskDefinition
  ScalableTargetRole: # based on http://docs.aws.amazon.com/AmazonECS/latest/developerguide/autoscale_IAM_role.html
    Condition: HasAutoScaling
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'application-autoscaling.amazonaws.com'
          Action: 'sts:AssumeRole'
      PermissionsBoundary: !Ref 'AWS::NoValue'
      Policies:
      - PolicyName: ecs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ecs:DescribeServices'
            - 'ecs:UpdateService'
            Resource: '*'
      - PolicyName: cloudwatch
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'cloudwatch:DescribeAlarms'
            Resource: '*'
  ScalableTarget:
    Condition: HasAutoScaling
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      MaxCapacity: !Ref MaxCapacity
      MinCapacity: !Ref MinCapacity
      ResourceId: !Sub
      - 'service/${Cluster}/${Service}'
      - Cluster: {'Fn::ImportValue': !Sub '${ParentClusterStack}-Cluster'}
        Service: !GetAtt 'Service.Name'
      RoleARN: !GetAtt 'ScalableTargetRole.Arn'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs
  ScaleUpPolicy:
    Condition: HasAutoScaling
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-up'
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 300
        MinAdjustmentMagnitude: 1
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 25
  ScaleDownPolicy:
    Condition: HasAutoScaling
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-down'
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 300
        MinAdjustmentMagnitude: 1
        StepAdjustments:
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: -25
Outputs:
  TemplateID:
    Description: 'template id.'
    Value: 'ecs/service-cluster-alb'
  TemplateVersion:
    Description: 'template version.'
    Value: '13.22.1'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  DNSName:
    Description: 'The DNS name for the ECS cluster/service load balancer.'
    Value: {'Fn::ImportValue': !Sub '${ParentClusterStack}-DNSName'}
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
  URL:
    Description: 'URL to the ECS service.' # TODO does not work with LoadBalancerHostPattern
    Value: !Sub
    - '${ClusterURL}${Path}'
    - ClusterURL: {'Fn::ImportValue': !Sub '${ParentClusterStack}-URL'}
      LoadBalancerPath: !Ref LoadBalancerPath
      Path: '/v1/docs'
    Export:
      Name: !Sub '${AWS::StackName}-URL'